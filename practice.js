// # 1)Базовые концепции
// ## Begin33
// Известно, что X кг конфет стоит A рублей. Определить, сколько стоит 1 кг и Y кг этих же конфет.

// Тут действительно можно не понять как делать, по факту X, A, Y
// это вводные данные их можно рандомно задать, через Math.random(), либо самому ввести.
//     а на выходе возвращай пару значений (можешь в массиве)

// const costSweets = function (X, A, Y) {
//     //1
//     const oneKilogram = A / X;
//     return oneKilogram * Y;
//
//     //2
//     //return (A / X) * Y;
// }
//
// console.log(costSweets(5, 10, 15));

// ## Begin34
// Известно, что X кг шоколадных конфет стоит A рублей, а Y кг ирисок стоит B рублей.
//     Определить, сколько стоит 1 кг шоколадных конфет, 1 кг ирисок, а также во сколько раз шоколадные конфеты дороже ирисок.

// const costSweets = function (X, A, Y, B){
//     const oneKilogramChocolates = A / X;
//     const oneKilogramToffee = B / Y;
//     const difference = A - B;
//
//     return `Шоколадные конфеты дороже ирисок на ${difference} рубля`;
// }
//
// console.log(costSweets(3, 15, 5, 12));

// # 2)Арифметические операции
// Все входные и выходные данные в заданиях этой группы являются целыми числами.
//     Все числа, для которых указано количество цифр (двузначное число, трехзначное число и т. д.),
// считаются положительными.
//
// ## Integer21
// С начала суток прошло N секунд (N — целое).
// Найти количество секунд, прошедших с начала последней минуты.

// const quantitySeconds = (seconds) => {
//     const s = seconds / 60;
//     const w = s - Math.floor(s);
//     return `С начало последней минуты прошло ${w.toFixed(3)} секунд`;
// }
//
// console.log(quantitySeconds(15189));

//
// ## Integer30
// Дан номер некоторого года (целое положительное число).
// Определить соответствующий ему номер столетия, учитывая, что, к примеру, началом 20 столетия был 1901 год.
//
//
// # 3)Логические выражения
// Во всех заданиях данной группы требуется вывести логическое значение TRUE,
//     если приведенное высказывание для предложенных исходных данных является истинным,
//     и значение FALSE в противном случае.
//     Все числа, для которых указано количество цифр (двузначное число, трехзначное число и т. д.),
// считаются целыми положительными.
//
// ## Boolean31
// Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника.
//     Проверить истинность высказывания: «Треугольник со сторонами a, b, c является равнобедренным».
//
// если a === b || a === c  то треугольник равнобедренный

// const triangleIsosceles = function(a, b, c) {
//     if(a === b){
//         return 'Треугольник равнобедренный';
//     }
//     if(b === c){
//         return 'Треугольник равнобедренный';
//     }
//     if (a === c) {
//         return 'Треугольник равнобедренный';
//     }
//
//     return 'Теугольник не равнобедренный'
// }
//
// console.log(triangleIsosceles(2, 6, 5));

// ## Boolean33
// Даны целые числа a, b, c.
//     Проверить истинность высказывания: «Существует треугольник со сторонами a, b, c».

// const triangle = function (a, b, c){
//     if(a === 0 || b === 0 || c === 0){
//         return 'Треугольник не существует';
//     }
//
//     return 'Треугольник существует';
// };
//
// console.log(triangle(2, 0, 5));

// # 4)Условный оператор
// Во всех заданиях данной группы требуется вывести логическое значение TRUE,
//     если приведенное высказывание для предложенных исходных данных является истинным,
//     и значение FALSE в противном случае.
//     Все числа, для которых указано количество цифр (двузначное число, трехзначное число и т. д.),
// считаются целыми положительными.
//
// ## if20
// На числовой оси расположены три точки: A, B, C.
//     Определить, какая из двух последних точек (B или C) расположена ближе к A,
//     и вывести эту точку и ее расстояние от точки A.
// если B меньше чем C, то B ближе к А

// const distance = function (A, B, C){
//     if(B < C){
//         return `Расстояние до точки А ${B}`;
//     }
//
//     return `Расстояние до точки А ${C}`;
// }
//
// console.log(distance(2, 10, 5));

// ## if29
// Дано целое число. Вывести его строку-описание вида «отрицательное четное число»,
// «нулевое число», «положительное нечетное число» и т. д.

const integer = function (number) {
    if(number > 0){
        return 'положительное четное число';
    }
    if(number === 0){
        return 'нулевое число';
    }
    if(number < 0){
        return 'отрицательное четное число';
    }
}

console.log(integer(-6));

// # 5) Цикл с параметром (for)
//
//     ## for17
// Дано вещественное число A и целое число N (>0).
// Используя один цикл, найти сумму "1 + A + A^2 + A^3 + ... + A^N"
//
// ## for20
// Дано целое число N (> 0).
// Используя один цикл, найти сумму "1! + 2! + 3! + ... + N!"
//
// ## for21
// Дано целое число N (> 0).
// Используя один цикл, найти сумму "1 + 1/(1!) + 1/(2!) + 1/(3!) + ... + 1/(N!)"
// (выражение N! — N–факториал — обозначает произведение всех целых чисел от 1 до N: "N! = 1·2·...·N").
// Полученное число является приближенным значением константы e = exp(1).
//
// ## for22
// Дано вещественное число X и целое число N (>0).
// Найти значение выражения "1+X +X^2/(2!)+...+X^N/(N!)"
//
//
// # 6) Цикл с условием
//
// ## while7
// Дано целое число N (> 0).
// Найти наименьшее целое положительное число K, квадрат которого превосходит N: K^2 > N
//
// ## while9
// Дано целое число N (>1).
// Найти наименьшее целое число K, при котором выполняется неравенство: 3^K > N.
//
// ## while17
// Дано целое число N (>0).
// Используя операции деления нацело и взятия остатка от деления,
//     вывести все его цифры, начиная с самой правой (разряда единиц)
//
// ## while24
// Дано целое число N (> 1).
// Проверить, является ли число N числом Фибоначчи. Если является, то
// вывести TRUE, если нет — вывести FALSE.
//
//     Последовательность чисел Фибоначчи (FK) определяется следующим образом:
//     "F[1] = 1, F[2] = 1, F[3] = F[1] + F[2], F[4] = F[2] + F[3] ... где сами числа = 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144..."
//
//
// # 7) Последовательности
// Во всех заданиях данной группы предполагается, что исходный набор содержит ненулевое число элементов
// (в частности, число N всегда больше нуля).
//
// ## Series2
// Даны десять вещественных чисел.
//     Найти их произведение.
//
// ## Series3
// Даны десять вещественных чисел.
//     Найти их среднее арифметическое.
//
//
// # 8) Функции
//
// ## Proc1
// Описать функцию PowerA3(A, B), вычисляющую третью степень числа A и возвращающую ее.
//
// ## Proc6
// Описать функцию DigitCountSum(K, C, S), находящую количество C цифр целого положительного числа K, а также их сумму S
// (K — входной, C и S — выходные параметры целого типа).
//
//
// # 9) Минимумы и максимумы
// Для решения заданий из данной группы следует использовать «однопроходные» алгоритмы,
//     позволяющие получить требуемый результат после однократного просмотра набора исходных данных.
//     Во всех заданиях данной группы предполагается, что исходный набор содержит ненулевое количество элементов
// (в частности, число N всегда больше нуля).
//
// ## Minmax1
// Дано целое число N.
//     Сгенерируйте массив из N случайных целых чисел.
//     Найти минимальный и максимальный из элементов данного массива и вывести их в указанном порядке.
//
// ## Minmax2
// Дано целое число N и набор из N прямоугольников,
//     заданных своими сторонами — объектами c парами рандомных чисел {a, b}.
// Найти минимальную и максимальную площадь прямоугольников из данного набора.
//     Пример массива на JS: "[{a: 4, b: 5},{a: 1, b: 7},{a: 1, b: 6},{a: 2, b: 2},{a: 1, b: 9}]"